apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdk 34
    defaultConfig {
        applicationId "cos.premy.mines"
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 9
        versionName '1.4.4'
        namespace 'cos.premy.mines'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}


def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport) {
    dependsOn 'testDebugUnitTest', 'compileDebugJavaWithJavac', 'connectedDebugAndroidTest'
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.required = true
        html.required = true
    }

    classDirectories.from = fileTree(
            dir: './build/intermediates/javac/debug',
            excludes: ['**/R*.class', '**/*$InjectAdapter.class', '**/*$ModuleAdapter.class', '**/*$ViewInjector*.class']
    )
    sourceDirectories.from = files(['src/main/java'])
    executionData.from = files([
            "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "$buildDir/outputs/code_coverage/debugAndroidTest/connected/Pixel_2_API_30(AVD) - 11/coverage.ec"
    ])
}






dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:gridlayout-v7:28.0.0'
    implementation 'junit:junit:4.13.2'

    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'junit:junit:4.13.2'

    testImplementation 'org.robolectric:robolectric:4.12'


    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'org.mockito:mockito-android:4.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'


    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'


    androidTestImplementation 'androidx.test:rules:1.4.0'

    androidTestImplementation 'com.android.support.test:rules:1.0.2'

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = false
    jacoco.destinationFile = file("$buildDir/jacoco/test.exec")
}
